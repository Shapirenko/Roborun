var config = {
    type: Phaser.AUTO,
    width: 1920,
    height: 1080,
    physics: {
        default: 'arcade',
        arcade: {
            gravity: { y: 400 },
            debug: false

        }
    },
    scene: {
        preload: preload,
        create: create,
        update: update
    }
};

var game = new Phaser.Game(config)
var worldWidth = 3840
var playerspeed = 400
var score = 0
var scoreText
var money
var gameOver = false
var life = 5
var enemySpeed = 400
var enemyCount = 0
var totalStars = 0
var attackCooldown = false;
var stars = worldWidth/80
let playerScore = 0;       // –ü–æ—Ç–æ—á–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –≥—Ä–∞–≤—Ü—è
let gameTime = 0;          // –ß–∞—Å, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–π —É –≥—Ä—ñ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
let leaderboard = JSON.parse(localStorage.getItem("leaderboard")) || []; // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤ –∑ localStorage
let timerInterval;

//–ó–∞–≤–∞–Ω—Ça–∂–µ–Ω–Ω—è –∞—Å–µ—Ç—ñ–≤
function preload() {

    this.load.image('background', 'assets/Background.png');

    this.load.spritesheet('cyborg', 'assets/Necromancer.png', { 
        frameWidth: 84,
        frameHeight: 104,
        margin: 124,
        spacing: 236,  });
    this.load.image('slash', 'assets/Attack.png');

    this.load.spritesheet('enemy', 'assets/Idle.png', { frameWidth: 46, frameHeight: 48 });

    this.load.image('platform', 'assets/Platform.png');
    this.load.image('platform1', 'assets/IndustrialTile_1.png');
    this.load.image('platform2', 'assets/IndustrialTile_2.png');
    this.load.image('platform3', 'assets/IndustrialTile_3.png');

    this.load.image('box', 'assets/Box.png');
    this.load.image('barrel', 'assets/Barrel.png');
    this.load.image('screen', 'assets/Screen.png');

    this.load.spritesheet('scull', 'assets/Skull.png', { frameWidth: 64, frameHeight: 64 });
    this.load.spritesheet('money', 'assets/Money.png', { frameWidth: 34, frameHeight: 30 });
    this.load.spritesheet('bomb', 'assets/Bomb_1.png', { frameWidth: 64, frameHeight: 64 });
    this.load.image('battery', 'assets/HP.png');
}

function create() {

    this.math = Phaser.Math;

    //–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤ –Ω–∏–∑—É –µ–∫—Ä–∞–Ω–∞
    this.background = this.add.tileSprite(0, 0, worldWidth, game.config.height, 'background').setOrigin(0, 0);

    platforms = this.physics.add.staticGroup();

    //–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–ª–∞—Ç—Ñ–æ—Ä–º —É –ø–æ–≤—ñ—Ç—Ä—ñ
    for (var x = 0; x <= worldWidth; x = x + 64) {
        platforms.create(x, 1016, 'platform').setOrigin(0, 0).refreshBody();
    }

    for (var x = 0; x <= worldWidth; x = x + Phaser.Math.Between(400, 500)) {
        var y = Phaser.Math.Between(400, 850)
        platforms.create(x - 64, y, 'platform1').setOrigin(0, 0).refreshBody();
        for (i = 0; i <= Phaser.Math.Between(1, 4); i++) {
            platforms.create(x + 64 * i, y, 'platform2').setOrigin(0, 0).refreshBody();
        }
        platforms.create(x + 64 * i, y, 'platform3').setOrigin(0, 0).refreshBody();
    }



    objects = this.physics.add.staticGroup();
    //—Ä–∞–Ω–¥–æ–º–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–±'—î–∫—Ç—ñ–≤
    for (var x = 0; x <= worldWidth; x = x + Phaser.Math.Between(200, 800)) {
        objects
            .create(x, 1016, 'screen')
            .setScale(Phaser.Math.FloatBetween(1.5, 3,))
            .setDepth(Phaser.Math.Between(0, 2))
            .setOrigin(0, 1)
            .refreshBody();
        objects
            .create(x = x + Phaser.Math.Between(50, 200), 1016, 'box')
            .setScale(Phaser.Math.FloatBetween(0.5, 1.2,))
            .setDepth(Phaser.Math.Between(0, 2))
            .setOrigin(0, 1)
            .refreshBody();
        objects
            .create(x = x + Phaser.Math.Between(45, 300), 1016, 'barrel')
            .setScale(Phaser.Math.FloatBetween(0.5, 1.2,))
            .setDepth(Phaser.Math.Between(0, 2))
            .setOrigin(0, 1)
            .refreshBody();
    }

    
    
    //—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    player = this.physics.add.sprite(100, 450, 'cyborg').setDepth(1);
    


    player.setBounce(0);
    player.setCollideWorldBounds(true);
    //—Ñ–Ω—ñ–º–∞—Ü—ñ—è –≤ –ª—ñ–≤—É —Å—Ç–æ—Ä–æ–Ω—É 
    this.anims.create({
        key: 'left',
        frames: this.anims.generateFrameNumbers('cyborg', { start: 17, end: 22 }),
        frameRate: 8,
        repeat: -1
    });
    this.anims.create({
        key: 'idle',
        frames: this.anims.generateFrameNumbers('cyborg', { start: 0, end: 7 }),
        frameRate: 8,
        repeat: -1,
    });
    this.anims.create({
        key: 'airmove',
        frames: this.anims.generateFrameNumbers('cyborg', { start: 17, end: 22 }),
        frameRate: 8,
        repeat: -1,
    });
    this.anims.create({
        key: 'attack',
        frames: this.anims.generateFrameNumbers('cyborg', { start: 34, end: 50 }),
        frameRate: 28,
        repeat: 0,
    });
    this.anims.create({
        key: 'death',
        frames: this.anims.generateFrameNumbers('cyborg', { start: 68, end: 76 }),
        frameRate: 6,
        repeat: 1,
    });
    //–ê–Ω—ñ–º–∞—Ü—ñ—è –≤ –ø—Ä–∞–≤—É —Å—Ç–æ—Ä–æ–Ω—É 
    this.anims.create({
        key: 'right',
        frames: this.anims.generateFrameNumbers('cyborg', { start: 17, end: 22 }),
        frameRate: 8,
        repeat: -1
    });
    this.anims.create({
        key: 'hit',
        frames: this.anims.generateFrameNumbers('cyborg', { start: 51, end: 55 }), 
        frameRate: 10,
        repeat: 0
    });
    //–ê–Ω—ñ–º–∞—Ü—ñ—è –≥—Ä–æ—à–µ–π 
    this.anims.create({
        key: 'money_idle',
        frames: this.anims.generateFrameNumbers('money', { start: 0, end: 5 }),
        frameRate: 10,
        repeat: -1
    });

    this.anims.create({
        key: 'enemy_move',
        frames: this.anims.generateFrameNumbers('enemy', { start: 0, end: 3 }),
        frameRate: 10,
        repeat: -1
    });

    this.anims.create({
        key: 'bomb_idle',
        frames: this.anims.generateFrameNumbers('bomb', { start: 0, end: 29 }), // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫—É —Ç–∞ –∫—ñ–Ω—Ü—è –∫–∞–¥—Ä—ñ–≤
        frameRate: 18, // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –∫–∞–¥—Ä—ñ–≤ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç—ñ
        repeat: -1     // –ó–∞—Ü–∏–∫–ª–∏—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ—é
    });

    this.anims.create({
        key: 'projectile_anim',
        frames: this.anims.generateFrameNumbers('scull', { start: 0, end: 7 }),
        frameRate: 10,
        repeat: -1
    });

    // –ö–æ–ª—ñ–∑—ñ—è –≥—Ä–∞–≤—Ü—è –∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
    this.physics.add.collider(player, platforms);

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–æ—à–µ–π
    money = this.physics.add.group({
        key: 'money',
        repeat: stars-1,
        setXY: { x: 12, y: 0, stepX: 80 }
    });

    money.children.iterate(function (child) {
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –¥–ª—è –≥—Ä–æ—à–µ–π
        child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));
        child.anims.play('money_idle', true);
    });

    //–í–∑–∞—î–º–æ–¥—ñ—è –∑ –≥—Ä–æ—à–∏–º–∞
    this.physics.add.collider(money, platforms);
    this.physics.add.overlap(player, money, collectMoney, null, this);
    // P–∞—Ö—É–Ω–æ–∫
    scoreText = this.add.text(0, 0, 'Score: 0', { fontSize: '32px', fill: '#000' })
        .setOrigin(0, 0)
        .setScrollFactor(0)
    //–õ—ñ–Ω—ñ—è –∂–∏—Ç—Ç—ñ–≤
    lifeText = this.add.text(1900, 30, showTextSymbols('üíÄ', life), { fontSize: '32px', fill: '#000' })
        .setOrigin(1, 0)
        .setScrollFactor(0)

    enemyText = this.add.text(195, 50, 'Enemies: ' + enemyCount, { fontSize: '32px', fill: '#000' })
        .setOrigin(1, 0)
        .setScrollFactor(0)

    //–ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
    resetButton = this.add.text(2, 100, 'reset', { fontSize: '32px', fill: '#000' })
        .setInteractive()
        .setScrollFactor(0);

    //–ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ —Ä–µ—Å—Ç–∞—Ä—Ç
    resetButton.on('pointerdown', function () {
        refreshBody()
    });
    // –¥–æ–¥–∞–Ω–Ω—è –±–æ–º–±–æ—á–æ–∫
    bombs = this.physics.add.group();
    //–ö–æ–ª—ñ–∑—ñ—ó –±–æ–º–±–æ—á–æ–∫
    this.physics.add.collider(bombs, platforms);

    this.physics.add.collider(player, bombs, hitBomb, null, this);

    enemy = this.physics.add.group();

    this.physics.add.collider(enemy, platforms);
    this.physics.add.collider(player, enemy, hitEnemy, null, this);

    hearts = this.physics.add.group();

    this.physics.add.collider(hearts, platforms);
    this.physics.add.overlap(player, hearts, collectHearts, null, this);

    projectiles = this.physics.add.group();

    gameTime = 0;
    timerInterval = setInterval(() => gameTime++, 1000)

    

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    this.input.on('pointerdown', attack, this);
    //–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏
    this.cameras.main.setBounds(0, 0, worldWidth, game.config.height);
    this.physics.world.setBounds(0, 0, worldWidth, game.config.height);

    //–°–ª—ñ–¥–∫—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏
    this.cameras.main.startFollow(player);

}

//–†—É—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–æ–∫
function update() {
    cursors = this.input.keyboard.createCursorKeys();

    if (player.anims.currentAnim && player.anims.currentAnim.key === 'hit') {
        return; // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó "—É–¥–∞—Ä—É"
    }

    if (player.anims.currentAnim && player.anims.currentAnim.key === 'attack') {
        return; // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –∞—Ç–∞–∫–∏
    }

    if (cursors.left.isDown) {
        player.setVelocityX(-playerspeed);
        player.anims.play('left', true);
        player.setScale(-1, 1);
        player.body.setOffset(84, 0);
    } else if (cursors.right.isDown) {
        player.setVelocityX(playerspeed);
        player.anims.play('right', true);
        player.setScale(1, 1);
        player.body.setOffset(0, 0);
    } else {
        player.setVelocityX(0);
        if (player.scaleX === -1) {
            player.anims.play('idle', true);
            player.body.setOffset(84, 0);
        } else {
            player.anims.play('idle', true);
            player.body.setOffset(0, 0);
        }
    }

    if (cursors.up.isDown && player.body.touching.down) {
        player.setVelocityY(-600);
        player.anims.play('airmove', true);
    } else if (!player.body.touching.down) {
        player.anims.play('airmove', true);
    }

    enemy.children.iterate(function (enemy) {
        if (enemy.active) {
            const playerToEnemy = player.x - enemy.x;
            const playerToEnemyY = player.y - enemy.y;

            if (Math.abs(playerToEnemy) < 400) {
                const enemySpeedModifier = 50;
                const enemySpeedX = playerspeed * (playerToEnemy > 0 ? 1 : -1) * enemySpeedModifier / 200;

                enemy.setAccelerationX(enemySpeedX);

                if (Math.abs(playerToEnemyY) > 100) {
                    const enemySpeedY = playerspeed * (playerToEnemyY > 0 ? 1 : -1) * enemySpeedModifier / 200;
                    enemy.setAccelerationY(enemySpeedY);
                } else {
                    enemy.setAccelerationY(0);
                }

                enemy.setVelocityY(enemy.body.acceleration.y);

                enemy.anims.play('enemy_move', true);

                if (this.physics.world.collide(enemy, player)) {
                    enemy.setAccelerationX(0);
                    enemy.setVelocityY(0);
                }
            } else {
                const initEnemyX = enemy.x;
                const initEnemyY = enemy.y;

                if (Math.abs(playerToEnemy) > 100) {
                    const enemySpeedX = playerspeed * (initEnemyX > player.x ? -1 : 1) * enemySpeed / 500;
                    enemy.setAccelerationX(enemySpeedX);
                } else {
                    enemy.setAccelerationX(0);
                }

                if (playerToEnemyY > 100) {
                    const enemySpeedY = playerspeed * (initEnemyY > player.y ? -1 : 1) * enemySpeed / 500;
                    enemy.setAccelerationY(enemySpeedY);
                } else {
                    enemy.setAccelerationY(0);
                }

                enemy.setVelocityY(enemy.body.acceleration.y);
            }
        }
    }, this);

    bombs.children.iterate(function (bomb) {
        if (bomb.active) {
            // –û–Ω–æ–≤–ª—é—î–º–æ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –±–æ–º–±–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–ø—Ä—è–º–∫—É —ó—ó —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            bomb.rotation = Math.atan2(bomb.body.velocity.y, bomb.body.velocity.x);
        }
    });

    projectiles.children.iterate(function (projectile) {
        if (projectile.active) {
            // –í–∏–º–∏–∫–∞—î–º–æ –≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—é –¥–ª—è —Å–Ω–∞—Ä—è–¥—ñ–≤
            projectile.body.gravity.y = 0;
        }
    });

    
}

function collectMoney(player, money) {
    money.disableBody(true, true);
    score += 10;
    scoreText.setText('Score: ' + score);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ä–∞—Ö—É–Ω–æ–∫ –∫—Ä–∞—Ç–Ω–∏–π 10
    if (score % 10 === 0) {
        spawnBomb();
        totalStars++;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ä–∞—Ö—É–Ω–æ–∫ –∫—Ä–∞—Ç–Ω–∏–π 100
    if (score % 60 === 0) {
        spawnBattery();
    }

    if (score % 50 === 0) {
        spawnEnemy();
        enemyCount +=1;
    }

    if (totalStars === stars) {
        // –ü–æ–∫–∞–∑—É—î–º–æ —Ç–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        showLeaderboardPopup.call(this);
        gameOver = true;
        this.physics.pause();

        // –û—á—ñ–∫—É—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à—ñ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –≥—Ä–∏
        document.addEventListener('keyup', function (event) {
            if (event.code == 'Enter') {
                window.location.reload();
            }
        });
    }
}

function spawnBattery() {
    var battery = hearts.create(player.x, player.y - 500, 'battery'); // –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞—Ç–∞—Ä–µ—é –ø—Ä—è–º–æ –Ω–∞–¥ –≥—Ä–∞–≤—Ü–µ–º
    battery.setScale(0.5);
    battery.setVelocity(0, 0); // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –Ω–∞ –Ω—É–ª—å, —â–æ–± –≤–æ–Ω–∞ –Ω–µ —Ä—É—Ö–∞–ª–∞—Å—å
}

function spawnBomb() {
    var x = (player.x < worldWidth) ? Phaser.Math.Between(0, worldWidth) : Phaser.Math.Between(0, worldWidth);
    var bomb = bombs.create(x, 0, 'bomb');
    bomb.setBounce(1);
    bomb.setCollideWorldBounds(true);
    bomb.setVelocity(Phaser.Math.Between(-200, 200), 20);

    bomb.body.setSize(52, 52); // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä —Ö—ñ—Ç–±–æ–∫—Å—É (—à–∏—Ä–∏–Ω–∞, –≤–∏—Å–æ—Ç–∞)
    bomb.body.setOffset(11, 11); // –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: –ó–º—ñ—â–µ–Ω–Ω—è —Ö—ñ—Ç–±–æ–∫—Å—É –≤—ñ–¥–Ω–æ—Å–Ω–æ —Å–ø—Ä–∞–π—Ç—É
    // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –ø—Ä–æ—Å—Ç–æ—é –±–æ–º–±–∏
    bomb.anims.play('bomb_idle', true);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–æ—Ä–æ–≥–∞
function spawnEnemy() {
    var newEnemy = enemy.create(player.x - 200, player.y - 500, 'enemy');
    newEnemy.setBounce(0);
    newEnemy.setCollideWorldBounds(true);
    newEnemy.setScale(1, 1);
    newEnemy.anims.play('enemy_move', true);

    // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –≤–æ—Ä–æ–≥—ñ–≤ —ñ –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç
    enemyCount += 1;
    enemyText.setText('Enemies: ' + enemyCount);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è –∑ –≤–æ—Ä–æ–≥–æ–º
function hitEnemy(player, enemy) {
    enemy.disableBody(true, true); // –í–∏–º–∏–∫–∞—î–º–æ –≤–æ—Ä–æ–≥–∞ –ø—Ä–∏ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—ñ

    player.anims.play('hit'); // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é —É–¥–∞—Ä—É

    player.on('animationcomplete-hit', function () {
        player.anims.play('idle');
    });

    life -= 1; // –ó–º–µ–Ω—à—É—î–º–æ –∂–∏—Ç—Ç—è –Ω–∞ 1
    lifeText.setText(showTextSymbols('üíÄ', life)); // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∂–∏—Ç—Ç—ñ–≤

    // –ó–º–µ–Ω—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –≤–æ—Ä–æ–≥—ñ–≤ —ñ –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç
    enemyCount -= 1;
    enemyText.setText('Enemies: ' + enemyCount); // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –≤–æ—Ä–æ–≥—ñ–≤

    if (life === 0) {
        gameOver = true;
        this.physics.pause();

        this.add.text(660, 490, 'For restart press: ENTER', { fontSize: '64px', fill: '#fff' })
            .setScrollFactor(0);

        document.addEventListener('keyup', function (event) {
            if (event.code == 'Enter') {
                window.location.reload();
            }
        });
    }
}

function collectHearts(player, hearts) {
    hearts.disableBody(true, true);

    life += 1;
    lifeText.setText(showTextSymbols('üíÄ', life))



    if (hearts === 0) {
        hearts.children.iterate(function (child) {

            child.enableBody(true, child.x, 0, true, true);

        });
    }

}
//–ö–æ–ª—ñ–∑—ñ—è –≥—Ä–∞–≤—Ü—è —Ç–∞ –±–æ–º–±–∏
function hitBomb(player, bomb) {
    bomb.disableBody(true, true); // –í–∏–º–∏–∫–∞—î–º–æ –±–æ–º–±—É –ø—Ä–∏ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—ñ

    player.anims.play('hit'); // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é —É–¥–∞—Ä—É

    player.on('animationcomplete-hit', function () {
        player.anims.play('idle');
    });

    life -= 1; // –ó–º–µ–Ω—à—É—î–º–æ –∂–∏—Ç—Ç—è –≥—Ä–∞–≤—Ü—è
    lifeText.setText(showTextSymbols('üíÄ', life)); // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∂–∏—Ç—Ç—ñ–≤

    if (life === 0) {
        gameOver = true;
        this.physics.pause();

        this.add.text(560, 490, 'For restart press: ENTER', { fontSize: '64px', fill: '#fff' })
            .setScrollFactor(0);

        document.addEventListener('keyup', function (event) {
            if (event.code == 'Enter') {
                window.location.reload();
            }
        });
    }
}


//–õ—ñ–Ω—ñ—è –∂–∏—Ç—Ç—è
function showTextSymbols(symbol, count) {
    var symbolLine = ''

    for (var i = 0; i < count; i++) {
        symbolLine = symbolLine + symbol
    }

    return symbolLine
}

//–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
function refreshBody() {
    // –ü–æ–≤–Ω—ñ—Å—Ç—é –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–∫–Ω–æ, —Å–∫–∏–¥–∞—é—á–∏ –≤—Å—ñ —Å—Ç–∞–Ω–∏ –≥—Ä–∏
    window.location.reload();
}

function attack() {
    if (attackCooldown || (player.anims.currentAnim && player.anims.currentAnim.key === 'attack')) {
        return;
    }

    attackCooldown = true;
    projectileSpawned = false;

    player.anims.play('attack', true);

    player.on('animationupdate', (anim, frame) => {
        if (frame.index === 14 && !projectileSpawned) {
            // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–Ω–∞—Ä—è–¥ —Å–ø—Ä–∞–≤–∞ –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É –≥—Ä–∞–≤—Ü—è
            const spawnX = player.x + player.width / 2 * player.scaleX; // –ö–æ—Ä–µ–≥—É—î–º–æ –ø–æ—è–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –Ω–∞–ø—Ä—è–º–∫—É –ø–æ–≥–ª—è–¥—É
            const spawnY = player.y;
            const projectile = projectiles.create(spawnX, spawnY, 'projectile_sprite');
            this.physics.add.existing(projectile);

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ö—ñ—Ç–±–æ–∫—Å —Å–Ω–∞—Ä—è–¥—É –≤ –ø–æ–ª–æ–≤–∏–Ω—É —Ä–æ–∑–º—ñ—Ä—É —Ç–∞ –∫–æ—Ä–µ–≥—É—î–º–æ –∑–º—ñ—â–µ–Ω–Ω—è
            projectile.body.setSize(projectile.width * 1.5, projectile.height / 1.3);
            projectile.body.setOffset(projectile.width / 2, projectile.height / 1.3);

            // –í–∏–∑–Ω–∞—á–∞—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–ø—Ä—è–º–∫—É –≥—Ä–∞–≤—Ü—è
            const velocityX = player.scaleX === -1 ? -1000 : 1000;
            projectile.setVelocity(velocityX, 0); // –ë–µ–∑ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –ø–æ Y –¥–ª—è –ø—Ä—è–º–æ—ó –ª—ñ–Ω—ñ—ó
            projectile.body.setAllowGravity(false); // –í–∏–º–∏–∫–∞—î–º–æ –≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—é

            // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Å–Ω–∞—Ä—è–¥, —è–∫—â–æ —Å—Ç—Ä—ñ–ª—è—î–º–æ –≤–ª—ñ–≤–æ
            projectile.setFlipX(player.scaleX === -1);

            // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é —Å–Ω–∞—Ä—è–¥—É
            projectile.anims.play('projectile_anim', true);

            // –û–Ω–æ–≤–ª—é—î–º–æ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤–µ–∫—Ç–æ—Ä—É —Ä—É—Ö—É
            projectile.update = function () {
                const angle = Math.atan2(projectile.body.velocity.y, projectile.body.velocity.x);
                projectile.setRotation(angle);
            };

            // –ó–Ω–∏—â—É—î–º–æ —Å–Ω–∞—Ä—è–¥ –ø—Ä–∏ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—ñ –∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ –∞–±–æ –≤–æ—Ä–æ–≥–∞–º–∏
            this.physics.add.collider(projectile, platforms, () => projectile.destroy());
            this.physics.add.overlap(projectile, enemy, (projectile, enemy) => {
                projectile.destroy();
                enemy.destroy();
                enemyCount -= 1;
                enemyText.setText('Enemies: ' + enemyCount);
            });

            // –ó–Ω–∏—â—É—î–º–æ —Å–Ω–∞—Ä—è–¥ —Ç–∞ –±–æ–º–±—É –ø—Ä–∏ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—ñ
            this.physics.add.overlap(projectile, bombs, (projectile, bomb) => {
                projectile.destroy();
                bomb.destroy();
            });

            projectileSpawned = true;
        }
    });

    player.once('animationcomplete-attack', () => {
        player.anims.play('idle', true);
        attackCooldown = false;
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –≤—ñ–∫–Ω–∞ —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤ –ø–æ —Ü–µ–Ω—Ç—Ä—É –µ–∫—Ä–∞–Ω—É
function showLeaderboardPopup() {
    // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä
    clearInterval(timerInterval);

    // –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫ —ñ —á–∞—Å –¥–æ —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤
    leaderboard.push({ score: score, time: gameTime });
    leaderboard.sort((a, b) => b.score - a.score); // –°–æ—Ä—Ç—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∑–∞ —Ä–∞—Ö—É–Ω–∫–æ–º
    leaderboard = leaderboard.slice(0, 5); // –û–±–º–µ–∂—É—î–º–æ –¥–æ —Ç–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    localStorage.setItem("leaderboard", JSON.stringify(leaderboard));

    // –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤
    const leaderboardText = leaderboard.map((entry, index) => {
        return `<li>${index + 1}. Score: ${entry.score}, Time: ${entry.time} sec</li>`;
    }).join('');

    // –ü–æ–∫–∞–∑—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤ —É —Å–ø–ª–∏–≤–∞—é—á–æ–º—É –≤—ñ–∫–Ω—ñ
    const popupOverlay = document.getElementById('popup-overlay');
    const popupTitle = document.getElementById('popup-title');
    const popupLeaderboard = document.getElementById('popup-leaderboard');
    const popupButton = document.getElementById('popup-button');

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—é—Ç—å –µ–ª–µ–º–µ–Ω—Ç–∏ –ø–µ—Ä–µ–¥ —ó—Ö –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é
    if (popupOverlay && popupTitle && popupLeaderboard && popupButton) {
        popupTitle.innerHTML = 'Leaderboard:';
        popupLeaderboard.innerHTML = leaderboardText;

        // –ü–æ–∫–∞–∑—É—î–º–æ –æ–≤–µ—Ä–ª–µ–π —Å–ø–ª–∏–≤–∞—é—á–æ–≥–æ –≤—ñ–∫–Ω–∞
        popupOverlay.style.display = 'flex';

        // –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
        popupButton.onclick = function () {
            console.log("Restart button clicked");
            refreshBody();
            popupOverlay.style.display = 'none'; // –•–æ–≤–∞—î–º–æ —Å–ø–ª–∏–≤–∞—é—á–µ –≤—ñ–∫–Ω–æ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
        };

        // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–ø–ª–∏–≤–∞—é—á–µ –≤—ñ–∫–Ω–æ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–ª–∞–≤—ñ—à—ñ 'Enter'
        document.addEventListener('keyup', function (event) {
            if (event.code == 'Enter') {
                console.log("Enter key pressed");
                refreshBody();
                popupOverlay.style.display = 'none'; // –•–æ–≤–∞—î–º–æ —Å–ø–ª–∏–≤–∞—é—á–µ –≤—ñ–∫–Ω–æ
            }
        }, { once: true });
    } else {
        console.error("Popup elements are not found.");
    }
}

// –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: –í–∏–¥–∞–ª—è—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ —Å–ø–ª–∏–≤–∞—é—á–æ–≥–æ –≤—ñ–∫–Ω–∞, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
function removePopup() {
this.popupElements.forEach(element => element.destroy());
}

function startTimer() {
gameTime = 0;
timerInterval = setInterval(() => {
  gameTime++;
  updateGameTimeUI(); // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–∞—Å—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
}, 1000);
}

function stopTimer() {
clearInterval(timerInterval);
}

function saveToLeaderboard(name) {
// –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä
stopTimer();

// –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤
const newEntry = {
  name: name || "Player",  // –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ prompt –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–µ –≤–≤–µ–¥–µ–Ω–Ω—è, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  score: playerScore,
  time: gameTime
};

// –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ –º–∞—Å–∏–≤—É —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤
leaderboard.push(newEntry);

// –°–æ—Ä—Ç—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∑–∞ —Ä–∞—Ö—É–Ω–∫–æ–º, –ø–æ—Ç—ñ–º –∑–∞ —á–∞—Å–æ–º –¥–ª—è –æ–¥–Ω–∞–∫–æ–≤–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (–º–µ–Ω—à–∏–π —á–∞—Å –∫—Ä–∞—â–∏–π)
leaderboard.sort((a, b) => b.score - a.score || a.time - b.time);

// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–æ–ø-5 –∑–∞–ø–∏—Å—ñ–≤ (–∞–±–æ –±—É–¥—å-—è–∫—É –±–∞–∂–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å)
leaderboard = leaderboard.slice(0, 5);

// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤ —É localStorage
localStorage.setItem("leaderboard", JSON.stringify(leaderboard));
}

function endGame(won) {
if (won) {
  // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä
  stopTimer();

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–∞—Ö—É–Ω–æ–∫ —É —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤
  const playerName = prompt("Enter your name:");
  saveToLeaderboard(playerName);

  // –ü–æ–∫–∞–∑—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤
  showLeaderboard();
}
}
